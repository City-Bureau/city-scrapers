AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ## Batch setup parameters
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Select security group.
  ## Scraper status Lambda parameters
  StatusBucketName:
    Type: String
    Default: city-scrapers-status
    Description: Name of S3 Bucket to be created
  CodeBucketName:
    Type: String
    Default: city-scrapers-lambda
    Description: Name of S3 Bucket containing the key in LambdaFileKey
  LambdaFileKey:
    Type: String
    Default: scrapers_status.zip
    Description: Zip file key name containing the application code
  LambdaHandler:
    Type: String
    Default: scrapers_status.handler
    Description: The Python file name and handler function inside the zip file
Resources:
  ## Batch setup resources
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      Path: /service-role/
  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      RoleName: city-scrapers-batch-job-role
      Policies:
      - PolicyName: S3ServicePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['s3:*']
            Resource: '*'
  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref BatchInstanceRole
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    DependsOn:
      - BatchServiceRole
      - BatchInstanceProfile
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        MaxvCpus: 6
        MinvCpus: 0
        DesiredvCpus: 0
        SecurityGroupIds: [!Ref 'SecurityGroup']
        Type: EC2
        Subnets: !Ref 'SubnetIds'
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        InstanceTypes:
          - m5.large
        Ec2KeyPair: !Ref 'KeyName'
        Tags: {"Service": "City Scrapers Jobs"}
      State: ENABLED
  JobQueue:
    Type: AWS::Batch::JobQueue
    DependsOn: ComputeEnvironment
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref 'ComputeEnvironment'
      State: ENABLED
      Priority: 1
      JobQueueName: city-scrapers-job-queue
  BatchJobTriggerFunctionRole:
      Type: AWS::IAM::Role
      DependsOn: JobQueue
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: batch-job-trigger-policy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - batch:*
                  Resource: "*"
        Path: "/"
  BatchJobTrigger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: city-scrapers-scheduler
      Description: Runs all available city scrapers job definitions
      Role: !GetAtt BatchJobTriggerFunctionRole.Arn
      Handler: index.handler
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          BATCH_JOB_QUEUE: city-scrapers-job-queue
      Code:
        ZipFile: |
          import os
          import boto3

          batch = boto3.client('batch')
          JOB_QUEUE = os.getenv('BATCH_JOB_QUEUE')

          def handler(event, context):
              try:
                  job_def_res = batch.describe_job_definitions()
                  job_defs = job_def_res['jobDefinitions']
                  while 'nextToken' in job_def_res:
                      job_def_res = batch.describe_job_definitions(
                          nextToken=job_def_res['nextToken'],
                      )
                      job_defs.extend(job_def_res['jobDefinitions'])

                  job_defs = set([job['jobDefinitionName'] for job in job_defs])

                  for job in job_defs:
                      try:
                          response = batch.submit_job(
                              jobName='{}-job'.format(job),
                              jobQueue=JOB_QUEUE,
                              jobDefinition=job,
                              retryStrategy={'attempts': 3}
                          )
                          print(response)
                      except batch.exceptions.ClientException as e:
                          pass
              except Exception as e:
                  print(e)
                  raise e
  BatchJobTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: BatchJobTriggerRule
      ScheduleExpression: rate(1 day)
      Targets:
        - Id: BatchJobTrigger
          Arn: !GetAtt BatchJobTrigger.Arn
      State: ENABLED
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchJobTrigger
      SourceArn: !GetAtt BatchJobTriggerRule.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  ## Scraper status Lambda resources
  ScraperStatusBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StatusBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: unavailable.svg
  ScraperStatusBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: ScraperStatusBucket
    Properties:
      Bucket: !Ref StatusBucketName
      PolicyDocument:
        Statement:
        - Sid: AllowPublicRead
          Effect: Allow
          Principal:
            AWS: "*"
          Action: s3:GetObject
          Resource:
            Fn::Sub:
            - arn:aws:s3:::${Bucket}/*
            - { Bucket: !Ref StatusBucketName }
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: scraper-lambda-execution-role
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource:
            - arn:aws:logs:*:*:*
          - Effect: Allow
            Action: s3:*
            Resource:
              Fn::Sub:
              - arn:aws:s3:::${Bucket}/*
              - { Bucket: !Ref StatusBucketName }
  ScraperStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref LambdaFileKey
      FunctionName: city-scrapers-status
      Handler: !Ref LambdaHandler
      MemorySize: 1024
      Role: !GetAtt IamRoleLambdaExecution.Arn
      Runtime: python3.6
      Timeout: 300
      Environment:
        Variables:
          STATUS_BUCKET: !Ref StatusBucketName
    DependsOn: IamRoleLambdaExecution
  ScraperStatusTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ScraperStatusTriggerRule
      EventPattern: |
        {
          "source": [
            "aws.ecs"
          ],
          "detail-type": [
            "ECS Task State Change"
          ]
        }
      Targets:
        - Id: ScraperStatusLambda
          Arn: !GetAtt ScraperStatusLambda.Arn
      State: ENABLED
  PermissionForEventsToInvokeStatusLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScraperStatusLambda
      SourceArn: !GetAtt ScraperStatusTriggerRule.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
